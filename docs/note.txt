NOTE: 1. 经常回顾下关于React的教程，熟悉用法，多看几遍。
https://zhuanlan.zhihu.com/p/30073543

2018-06-25:
能干的周边都干了，在不碰virtualDOM的前提下。

现在需要开始实现virtualDOM了。

深度剖析：如何实现一个 Virtual DOM 算法: https://github.com/livoras/blog/issues/13

2018-06-26:
真的的入口函数是：React.createElement(type, config, ...children)
Type: html tag
config: props, className, key...
children: 剩余参数（Rest Parameters）
return: one virtual Node

class Vnode(){
    construction(type, props, key, ref) {
        this.type = type;
        this.props = props;
        this.key = key;
        this.ref = ref;
    }
}

function createElement(type, config, ...children) {
    let props = {},
        key = null,
        ref = null,
        childrenLength = children.length;

    if (config != null) {  // NOTE: undefined == null, return true, so check both undefined and null
        key = config.key === undefined ? null : '' + config.key; // convert key to string
        ref = config.ref === undefined ? null : config.ref;

        // then parse config to props
        for (let propName in config) {
            // no key or ref in props
            if (propName === 'key' || propName === 'ref')
                continue;
            if (config.hasOwnProperty(propName)) {
                props[propName] = config[propName]
            }
        }
    }

    if (childrenLength === 1){
        props.children = children[0];
    }
    else{
        props.children = children;
    }

    return new Vnode(type, props, key, ref);
}

export const React = {
    createElement;
}


// NOTE: 以上就是通过createElement()建立了一棵虚拟树， 由Vnode构成，Vnode里的props.children包含了子Vnode。
// 从而建立了一棵Vnode树结构。
//
//
// 下一步就是用ReactDOM.render()来解析这棵虚拟树，翻译成真正的DOM。

function renderByLuy(Vnode, container) {
    if (!Vnode) return;

    const { type, props } = Vnode;

    if (!type) return;

    const { children } = props;

    let domNode;
    domNode = document.createElement(type);
    // NOTE: loop through all children, not only one?
    mountChildren(children, domNode);  // NOTE: recusion!
    mapProps(domNode, props);

    container.appendChild(donNode);
}

function mountChildren(children, domNode) {
    renderByLuy(children, domNode);
}

function mapProps(domNode, props){
    for (let propsName in props){
        if (propsName === 'children')
            continue;
        if (propsName === 'style') {
            let style = props['style']
            Object.keys(style).forEach((styleName) => {
                domNode.style[styleName] = style[styleName];
            });
            continue
        }
        domNode[propsName] = props[propsName];
    }
}

export const ReactDOM = {
    render: renderByLuy
}



// STEP2:

//组件=component
class Component {
    constructor(props) {
        this.props = props;
        this.state = this.state || {}

        this.nextState = null
    }

    setState(partialState) {
        // TODO
    }

    render() {
        // TODO
    }
}

function renderByLuy(Vnode, container) {
    if (!Vnode) return;

    const { type, props } = Vnode;

    if (!type) return;

    const { children } = props;

    let domNode;
    const VnodeType = typeof type;

    if(VnodeType === 'function') {
        domNode = renderComponent(Vnode, container);
    }
    else if(VnodeType === 'string') {
        domNode = document.createElement(type);
    }

    // NOTE: loop through all children, not only one?
    mountChildren(children, domNode);  // NOTE: recusion!
    mapProps(domNode, props);

    container.appendChild(domNode);

    return domNode;
}

function renderComponent(Vnode, container) {
    const ComponentClass = Vnode.type;
    const { props } = Vnode.props;
    const instance = new ComponentClass(props);

    const renderedVnode = instance.render();
    const domNode = renderByLuy(renderedVnode, container);

    instance.Vnode = renderedVnode; // store Vnode into the instance for recording
    return domNode;
}

// STEP3:
class Component {
    constructor(props) {
        this.props = props;
        this.state = this.state || {}

        this.nextState = null
    }

    setState(partialState) {
        const preState = this.state;
        this.nextState = {...this.state, ...partialState};
        this.state = this.nextState;

        const oldVnode = this.Vnode;
        const newVnode = this.render();
        updateComponent(this, oldVnode, newVnode);
    }

    render() {
        // TODO
    }
}

function updateComponent(instance, oldVnode, newVnode) {
    //TODO
}

// diff rules:
// 1. if newVnode has a differnt type from old Vnode, delete old one and insert new one.
// 2. if types are the same, do diff!

class fuck{

    render() {
        return <div> hello { props.name } </div>
    }
}

function renderByLuy(Vnode, container) {
    if (!Vnode) return;

    const { type, props } = Vnode;

    if (!type) return;

    const { children } = props;

    let domNode;
    const VnodeType = typeof type;

    if(VnodeType === 'function') {
        domNode = renderComponent(Vnode, container);
    }
    else if(VnodeType === 'string') {
        domNode = document.createElement(type);
    }

    // NOTE: loop through all children, not only one?
    mountChildren(children, domNode);  // NOTE: recusion!
    mapProps(domNode, props);

    // NOTE: New change here!
    Vnode._hostNode = domNode;
    container.appendChild(domNode);

    return domNode;
}

function updateComponent(instance, oldVnode, newVnode) {
    if(oldVnode.type === newVnode.type) {
        mapProps(oldVnode._hostNode, newVnode.props) // update node. why only props?
        //NOTE: setState only need to change props?
        // or this is like a makeup
    }
    else {
        // remove
    }
}

------------------------------------2019-01-14---------
以上的都搞定了，有了最最基础的state，接下来想想下一个阶段的目标。

------------------------------------2019-01-17---------
下一阶段目标：
0. 清理下代码， 看看Luy: 从version 0.0.1开始看， commit key：cf391d23017a948f752369cd4c6b4c07a3b2b6ce

1. 完善最基础的state，加上递归更新能力
    1.1 需要理解react是如何更新tree的
    1.2 将理解的算法添加的我的代码里

2. 研究下Luy是怎么测试的？
