!function(Q){var B={};function F(I){if(B[I])return B[I].exports;var n=B[I]={i:I,l:!1,exports:{}};return Q[I].call(n.exports,n,n.exports,F),n.l=!0,n.exports}F.m=Q,F.c=B,F.d=function(Q,B,I){F.o(Q,B)||Object.defineProperty(Q,B,{enumerable:!0,get:I})},F.r=function(Q){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},F.t=function(Q,B){if(1&B&&(Q=F(Q)),8&B)return Q;if(4&B&&"object"==typeof Q&&Q&&Q.__esModule)return Q;var I=Object.create(null);if(F.r(I),Object.defineProperty(I,"default",{enumerable:!0,value:Q}),2&B&&"string"!=typeof Q)for(var n in Q)F.d(I,n,function(B){return Q[B]}.bind(null,n));return I},F.n=function(Q){var B=Q&&Q.__esModule?function(){return Q.default}:function(){return Q};return F.d(B,"a",B),B},F.o=function(Q,B){return Object.prototype.hasOwnProperty.call(Q,B)},F.p="",F(F.s=0)}([function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: ./src/react-utils.js\nfunction isClass(func) {\n  // a hack way to check weather it is class or not\n  return typeof func === 'function' && /^class\\s/.test(Function.prototype.toString.call(func));\n}\n\nfunction isFunc(func) {\n  return typeof func === 'function' && !isClass(func);\n}\n\nfunction isEvent(name) {\n  return name.substring(0, 2) === 'on' ? true : false;\n}\n\nfunction isClassName(name) {\n  return name === 'className';\n}\n\n\n// CONCATENATED MODULE: ./src/react.js\n\nlet rootDOMElement, rootReactElement;\nconst REACT_CLASS = 'REACT_CLASS';\nlet classCounter = 0;\nconst classMap = {};\n\nclass Vnode {\n  constructor(type, props, key, ref) {\n    this.type = type;\n    this.props = props;\n    this.key = key;\n    this.ref = ref;\n  }\n\n}\n\nclass Component {\n  constructor(props) {\n    this.props = props;\n    this.state = this.state || {};\n    this.nextState = null;\n  }\n\n  setState(partialState) {// TODO\n  }\n\n  render() {// TODO\n  }\n\n} // use createElement() create Vnode, extract info from params to Vnode\n\n\nfunction createElement(type, config, ...children) {\n  let props = {},\n      key = null,\n      ref = null;\n  props.children = children; //children is always array\n  // parse config\n\n  if (config != null) {\n    // NOTE: undefined == null, return true, so check both undefined and null\n    key = config.key === undefined ? null : '' + config.key; // convert key to string\n\n    ref = config.ref === undefined ? null : config.ref; // then parse config to props\n\n    for (let propName in config) {\n      // no key or ref in props\n      if (propName === 'key' || propName === 'ref') continue;\n\n      if (config.hasOwnProperty(propName)) {\n        props[propName] = config[propName];\n      }\n    }\n  }\n\n  return new Vnode(type, props, key, ref);\n}\n/* NOTE: replace with virtual node*/\n// function createElement(el, props, ...children) {\n//     return anElement(el, props, children);\n// }\n\n\nfunction anElement(element, props, children) {\n  if (isClass(element)) {\n    return handleClass(element, props, children);\n  } else if (isFunc(element)) {\n    return element(props);\n  } else {\n    return handleDOMNode(element, props, children);\n  }\n}\n\nfunction handleClass(clazz, props, children) {\n  classCounter++;\n\n  if (classMap[classCounter]) {\n    return classMap[classCounter];\n  }\n\n  const reactElem = new clazz(props);\n  reactElem.children = children;\n  reactElem.type = REACT_CLASS;\n  classMap[classCounter] = reactElem; // NOTE: return the obj instead of calling render() here\n\n  return reactElem;\n}\n\nfunction handleDOMNode(element, props, children) {\n  const anElement = document.createElement(element);\n\n  if (children !== null) {\n    children.map(c => {\n      appendChild(anElement, c);\n    });\n  } // add event listeners or attributes from props\n\n\n  for (let propName in props) {\n    appendProp(anElement, propName, props[propName]);\n  }\n\n  return anElement;\n}\n\nfunction appendChild(element, child) {\n  if (child.type === 'REACT_CLASS') {\n    appendChild(element, child.render());\n  } else if (Array.isArray(child)) {\n    child.map(ch => {\n      element.appendChild(ch);\n    });\n  } else if (typeof child === 'object') {\n    element.appendChild(child);\n  } else {\n    element.innerHTML += child;\n  }\n}\n\nfunction appendProp(element, propName, propVal) {\n  if (isEvent(propName)) {\n    element.addEventListener(propName.substring(2).toLowerCase(), propVal);\n  } else if (isClassName(propName)) {\n    propName = 'class';\n    element.setAttribute(propName, propVal);\n  } else {\n    element.setAttribute(propName, propVal);\n  }\n} // class Component {\n//     constructor(props) {\n//         this.props = props;\n//     }\n//     setState (state) {\n//         this.state = Object.assign({}, this.state, state);\n//         reRender();\n//     }\n// }\n\n\nfunction reRender() {\n  // delete old dom tree\n  while (rootDOMElement.hasChildNodes()) {\n    rootDOMElement.removeChild(rootDOMElement.lastChild);\n  } // render again\n\n\n  classCounter = 1; // skip the root\n\n  ReactDOM.render(rootReactElement, rootDOMElement);\n}\n\n/* harmony default export */ var react = ({\n  createElement,\n  Component\n});\n// CONCATENATED MODULE: ./src/reactDOM.js\n// const REACT_CLASS = 'REACT_CLASS';\n// TODO: refactor for Component wrapper\nfunction render(Vnode, container) {\n  // NOTE: 2 kinds of Vnode\n  if (!Vnode) return;\n  let {\n    type,\n    props\n  } = Vnode;\n  if (!type) return;\n  let {\n    children\n  } = props; // children is always an array, even []\n\n  const VnodeType = typeof type;\n  let domNode;\n\n  if (VnodeType === 'function') {\n    const VnodeRoot = renderComponent(Vnode);\n    type = VnodeRoot.type;\n    props = VnodeRoot.props;\n    children = props.children;\n    domNode = document.createElement(type);\n  } else if (VnodeType === 'string') {\n    domNode = document.createElement(type);\n  }\n\n  for (let i = 0; i < children.length; i++) {\n    mountChildren(children[i], domNode); // NOTE: recusion!\n  }\n\n  mapProps(domNode, props);\n  container.appendChild(domNode);\n}\n\nfunction renderComponent(VnodeWrapper) {\n  //\n  const ComponentClass = VnodeWrapper.type;\n  const {\n    props\n  } = VnodeWrapper;\n  const instance = new ComponentClass(props);\n  const unwrappedVnode = instance.render(); // generate Vnodes(like a tree) in class's render()\n\n  instance.Vnode = unwrappedVnode; // store Vnode into the instance for recording\n\n  return unwrappedVnode;\n}\n\nfunction mountChildren(child, domNode) {\n  // check children's type\n  if (typeof child === 'string') {\n    domNode.innerHTML += child;\n    return;\n  }\n\n  render(child, domNode);\n}\n\nfunction mapProps(domNode, props) {\n  for (let propsName in props) {\n    if (propsName === 'children') continue;\n\n    if (propsName === 'style') {\n      let style = props['style'];\n      Object.keys(style).forEach(styleName => {\n        domNode.style[styleName] = style[styleName];\n      });\n      continue;\n    }\n\n    domNode[propsName] = props[propsName];\n  }\n} // function render(el, domEl) {\n//     let rootDOMElement = domEl;\n//     let rootReactElement = el;\n//     let currentDOM;\n//     if (rootReactElement.type === REACT_CLASS) {\n//         currentDOM = rootReactElement.render();\n//     }\n//     else {\n//         currentDOM = rootReactElement;\n//     }\n//     domEl.appendChild(currentDOM);\n// }\n\n\n/* harmony default export */ var reactDOM = ({\n  render\n});\n// CONCATENATED MODULE: ./app/app.jsx\n\n // const MyCoolJSXQuoteComponent = ({quote, author}) => {\n//   return (\n//     <div className=\"quote-container\">\n//       <h4 className=\"quote\">\"{quote}\"</h4>\n//       <div className=\"author\">- {author}</div>\n//     </div>\n//   );\n// };\n//\n//\n// ReactDOM.render(\n//   <MyCoolJSXQuoteComponent\n//     quote=\"The only source of knowledge is experience.\"\n//     author=\"Albert Einstein\"/>,\n//   document.getElementById('root'));\n// TEST 1\n// const helloWorld = <div>hello sb!</div>;\n//\n// ReactDOM.render(helloWorld, document.getElementById('root'));\n// TEST 2\n// const helloWorld2 = <div style={{background: 'red'}}>\n//                         hello sb!\n//                         <div>\n//                             hello tony!\n//                         </div>\n//                     </div>;\n//\n// ReactDOM.render(helloWorld2, document.getElementById('root'));\n// TEST 3\n// class Hello extends React.Component{\n//     render() {\n//         return (\n//             <div>\n//                 Hello!!!\n//                 <span>\n//                     aaaaaa\n//                     <span>\n//                         vvvvvvvvvv\n//                     </span>\n//                 </span>\n//             </div>\n//         )\n//     }\n// }\n//\n// const helloWorld = (\n//     <div>\n//         ssssss\n//         <Hello/>\n//     </div>\n//     );\n// ReactDOM.render(helloWorld, document.getElementById('root'));\n// TEST 4\n\nclass app_Hello extends react.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return react.createElement(\"div\", null, \"Hello!!!\", this.props.children[0]);\n  }\n\n}\n\nconst helloWorld = react.createElement(\"div\", null, \"ssssss\", react.createElement(app_Hello, null, react.createElement(\"div\", null, \"Yang\")));\nreactDOM.render(helloWorld, document.getElementById('root'));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n")}]);